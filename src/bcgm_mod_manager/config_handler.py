import os
from typing import Any

import yaml

from . import helper


def set_apk_folder() -> None:
    """
    Sets the apk folder.
    """
    apk_folder = helper.select_dir(
        title="Select the apk folder", default_dir=get_config_setting("apk_folder")
    )
    set_config_setting("apk_folder", apk_folder)
    helper.colored_text("Apk folder set successfully.", helper.Color.GREEN)


def set_mod_folder() -> None:
    """
    Sets the mod folder.
    """
    mod_folder = helper.select_dir(
        title="Select the mod folder", default_dir=get_config_setting("mod_folder")
    )
    set_config_setting("mod_folder", mod_folder)
    helper.colored_text("Mod folder set successfully.", helper.Color.GREEN)

def set_mod_repo() -> None:
    """
    Sets the mod repository.
    """
    mod_repo = helper.colored_input("Enter the mod repository:")
    set_config_setting("mod_repo", mod_repo)
    helper.colored_text("Mod repository set successfully.", helper.Color.GREEN)


def set_apk_copy_path() -> None:
    """
    Sets the apk copy path.
    """
    apk_copy_path = helper.select_dir(
        title="Select the apk copy path",
        default_dir=get_config_setting("apk_copy_path"),
    )
    set_config_setting("apk_copy_path", apk_copy_path)
    helper.colored_text("Apk copy path set successfully.", helper.Color.GREEN)


def get_config_file() -> dict[str, Any]:
    """
    Get the config file

    Returns:
        dict: Config file
    """
    config_file = os.path.join(get_app_data_folder(), "config.yaml")
    if not os.path.exists(config_file):
        create_config_file()
    with open(config_file, "r") as fh:
        config = yaml.safe_load(fh)
    return config


def get_config_setting(setting: str) -> Any:
    """
    Get a config setting

    Args:
        setting (str): Setting to get

    Returns:
        Any: Value of setting
    """
    config = get_config_file()
    return config.get(setting)


def set_config_setting(setting: str, value: Any) -> None:
    """
    Set a config setting

    Args:
        setting (str): Setting to set
        value (Any): Value to set setting to
    """
    config = get_config_file()
    config[setting] = value
    with open(os.path.join(get_app_data_folder(), "config.yaml"), "w") as fh:
        yaml.safe_dump(config, fh)


def create_config_file() -> None:
    """
    Create the config file if it doesn't exist
    """
    config_file = os.path.join(get_app_data_folder(), "config.yaml")
    file_data = """# Configuration file for bcgm_mod_manager
#
# This file is automatically generated by bcgm_mod_manager.
#
# To change the settings, edit the settings in the bcgm_mod_manager settings option or directly modify them here.
mod_folder: "./src/bcgm_mod_manager/files/Mods" # Path to the mod folder
apk_folder: "./src/bcgm_mod_manager/files/APKs" # Path to the apk folder
apk_copy_path: "" # Path to copy the apk to once mods are loaded
apk_password: "BCGM_CUSTOM_APK" # Password for signing the apk
mod_repo: "https://github.com/fieryhenry/bcgm_mod_manager" # Mod repository for the mod browser
"""
    if not os.path.exists(config_file):
        with open(config_file, "w") as fh:
            fh.write(file_data)


def get_app_data_folder() -> str:
    """
    Get the path to the app data folder cross platform

    Returns:
        str: Path to app data folder
    """
    app_name = "bcgm_mod_manager"
    os_name = os.name
    if os_name == "nt":
        path = os.path.join(os.environ["APPDATA"], app_name)
    elif os_name == "mac":
        path = os.path.join(
            os.environ["HOME"], "Library", "Application Support", app_name
        )
    elif os_name == "posix":
        path = os.path.join(os.environ["HOME"], app_name)
    else:
        raise Exception(f"Unsupported platform {os_name}")
    helper.check_dir(path)
    return path
