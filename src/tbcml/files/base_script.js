'use strict';

// This part of the script is automatically generated by tbcml.
// You can see the log by running adb logcat -s tbcml.

function logError(message) {
    Java.perform(function () {
        var Log = Java.use("android.util.Log");
        Log.e("tbcml", message);
        console.error(message);
    });
}
function logWarning(message) {
    Java.perform(function () {
        var Log = Java.use("android.util.Log");
        Log.w("tbcml", message);
        console.warn(message);
    });
}
function logInfo(message) {
    Java.perform(function () {
        var Log = Java.use("android.util.Log");
        Log.i("tbcml", message);
        console.info(message);
    });
}
function logVerbose(message) {
    Java.perform(function () {
        var Log = Java.use("android.util.Log");
        Log.v("tbcml", message);
        console.log(message);
    });
}
function logDebug(message) {
    Java.perform(function () {
        var Log = Java.use("android.util.Log");
        Log.d("tbcml", message);
        console.log(message);
    });
}
function log(message, level = "info") {
    switch (level) {
        case "error":
            logError(message);
            break;
        case "warning":
            logWarning(message);
            break;
        case "info":
            logInfo(message);
            break;
        case "verbose":
            logVerbose(message);
            break;
        case "debug":
            logDebug(message);
            break;
        default:
            logInfo(message);
            break;
    }
}

log("Script loaded successfully.");

function getBaseAddress() {
    return Module.findBaseAddress("libnative-lib.so").add(4096); // offset due to libgadget being added
}

function readStdString(address) {
    const isTiny = (address.readU8() & 1) === 0;
    if (isTiny) {
        return address.add(1).readUtf8String();
    }

    return address.add(2 * Process.pointerSize).readPointer().readUtf8String();
}

function writeStdString(address, content) {
    const isTiny = (address.readU8() & 1) === 0;
    if (isTiny)
        address.add(1).writeUtf8String(content);
    else
        address.add(2 * Process.pointerSize).readPointer().writeUtf8String(content);
}

function getJavaClass(className) {
    var classFactory;
    const classLoaders = Java.enumerateClassLoadersSync();
    for (const classLoader in classLoaders) {
        try {
            classLoaders[classLoader].findClass(className);
            classFactory = Java.ClassFactory.get(classLoaders[classLoader]);
            break;
        } catch (e) {
            continue;
        }
    }
    return classFactory.use(className);
}

// Mod scripts go here