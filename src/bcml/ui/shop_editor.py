from typing import Optional
from PyQt5 import QtWidgets, QtCore, QtGui
from bcml.core import mods, game_data
from bcml.ui import ui_thread, gatya_item


class ShopEditor(QtWidgets.QWidget):
    def __init__(
        self,
        mod: mods.bc_mod.Mod,
        game_packs: game_data.pack.GamePacks,
        parent: Optional[QtWidgets.QWidget] = None,
    ):
        super(ShopEditor, self).__init__(parent)
        self.mod = mod
        self.game_packs = game_packs
        self.setup_ui()

    def setup_ui(self):
        layout = QtWidgets.QVBoxLayout(self)
        layout.setObjectName("item_shop_layout")
        self.setLayout(layout)

        self._item_shop_table = QtWidgets.QTableWidget(self)
        self._item_shop_table.setObjectName("item_shop_table")
        self._item_shop_table.setColumnCount(8)
        self._item_shop_table.setHorizontalHeaderLabels(
            [
                self.tr("Item ID"),
                self.tr("Item Name"),
                self.tr("Price"),
                self.tr("Amount"),
                self.tr("Effective Amount"),
                self.tr("Image"),
                self.tr("Draw Item Amount"),
                self.tr("Item Category"),
            ]
        )
        self._item_shop_table.horizontalHeader().setSectionResizeMode(
            QtWidgets.QHeaderView.ResizeMode.ResizeToContents
        )
        self._item_shop_table.verticalHeader().setSectionResizeMode(
            QtWidgets.QHeaderView.ResizeMode.ResizeToContents
        )

        # make the last column stretch to fill the table
        self._item_shop_table.horizontalHeader().setStretchLastSection(True)

        item_id_header = self._item_shop_table.horizontalHeaderItem(0)
        item_id_header.setToolTip(
            self.tr("The ID of the item that is purchased. Double-click to edit.")
        )

        price_header = self._item_shop_table.horizontalHeaderItem(2)
        price_header.setToolTip(
            self.tr(
                "The price of the item that is purchased in catfood. Double-click to edit."
            )
        )
        amount_header = self._item_shop_table.horizontalHeaderItem(3)
        amount_header.setToolTip(
            self.tr("The amount of the item that is purchased. Double-click to edit.")
        )

        effective_amount_header = self._item_shop_table.horizontalHeaderItem(4)
        effective_amount_header.setToolTip(
            self.tr(
                "The real amount of the item that is purchased.\n"
                + "This is the amount of the item that is purchased multiplied by the quantity of the item.\n"
                + "E.g XP can be purchased as 5000 in game, the effective amount is 5000, the amount is 1, and the item quantity is 5000.\n"
                + "Item quantity is a property of the item, not the shop, and so it cannot be edited here."
            )
        )

        image_header = self._item_shop_table.horizontalHeaderItem(5)
        image_header.setToolTip(
            self.tr(
                "The image of the item that appears in the shop. Is not autogenerated and any new art must be drawn manually."
            )
        )

        display_current_amount_header = self._item_shop_table.horizontalHeaderItem(6)
        display_current_amount_header.setToolTip(
            self.tr(
                "Whether or not to display the current amount of the item in the shop.\n"
                + "If the item has a quantity of 1, this should be checked."
            )
        )

        item_category_header = self._item_shop_table.horizontalHeaderItem(7)
        item_category_header.setToolTip(
            self.tr("The category of the item that appears in the shop")
        )

        layout.addWidget(self._item_shop_table)

        add_row_button = QtWidgets.QPushButton(self.tr("Add Item"), self)
        add_row_button.clicked.connect(self.add_row)  # type: ignore
        layout.addWidget(add_row_button)

        self._item_shop_table.setContextMenuPolicy(
            QtCore.Qt.ContextMenuPolicy.CustomContextMenu
        )
        self._item_shop_table.customContextMenuRequested.connect(self.show_context_menu)  # type: ignore

        self._item_shop_table.setDragEnabled(True)
        self._item_shop_table.setDragDropMode(
            QtWidgets.QAbstractItemView.DragDropMode.InternalMove
        )

        # disallow selection of multiple rows
        self._item_shop_table.setSelectionBehavior(
            QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows
        )
        self._item_shop_table.setSelectionMode(
            QtWidgets.QAbstractItemView.SelectionMode.SingleSelection
        )

        self._item_shop_table.dropEvent = self.dropEvent

        self._thread = ui_thread.ThreadWorker.run_in_thread_on_finished(
            self.setup_data, self.fill_table
        )

    def dropEvent(self, event: QtGui.QDropEvent) -> None:  # type: ignore
        source = event.source()
        if source == self._item_shop_table:
            dest_row = self._item_shop_table.rowAt(event.pos().y())
            source_row = self._item_shop_table.currentRow()
            if dest_row == -1:
                return
            if source_row == -1:
                return
            if dest_row == source_row:
                return
            item = self.item_shop.get_item(source_row)
            if item is None:
                return
            back_wards = dest_row < source_row
            if back_wards:
                self.item_shop.insert_item(dest_row, item)
                self.item_shop.remove_item(source_row + 1)
            else:
                self.item_shop.insert_item(dest_row + 1, item)
                self.item_shop.remove_item(source_row)

            self.clear_table()
            self.fill_table()
            self._item_shop_table.selectRow(dest_row)
        event.ignore()

    def clear_table(self):
        self._item_shop_table.clearContents()
        self._item_shop_table.setRowCount(0)

    def show_context_menu(self, pos: QtCore.QPoint):
        menu = QtWidgets.QMenu()
        add_action = menu.addAction("Add Item")
        remove_action = menu.addAction("Remove Item")
        action = menu.exec_(self._item_shop_table.mapToGlobal(pos))
        if action == add_action:
            self.add_row()
        elif action == remove_action:
            self.remove_row()

    def add_row(self):
        row = self._item_shop_table.rowCount()

        gaty_item = self.gatya_items.get_item(0)
        if gaty_item is None:
            return
        self.item_shop.add_item(
            game_data.cat_base.item_shop.Item(
                shop_id=row,
                gatya_item_id=0,
                count=0,
                price=0,
                draw_item_value=True,
                category_name="shop_category1",
                imgcut_id=0,
                cut=self.item_shop.items[0].cut,
            )
        )
        self._item_shop_table.clearContents()
        self.fill_table()

    def remove_row(self):
        row = self._item_shop_table.currentRow()
        if row == -1:
            return
        self.item_shop.remove_item(row)
        self._item_shop_table.clearContents()
        self.fill_table()

    def save(self):
        self.mod.cat_base.item_shop = self.item_shop

    def setup_data(self):
        item_shop = game_data.cat_base.item_shop.ItemShop.from_game_data(
            self.game_packs
        )
        gatya_items = game_data.cat_base.gatya_item.GatyaItems.from_game_data(
            self.game_packs
        )
        if item_shop is None or gatya_items is None:
            raise RuntimeError("Failed to load item shop data")
        self.item_shop = item_shop
        self.gatya_items = gatya_items

    def fill_table(self):
        self._item_shop_table.setRowCount(len(self.item_shop.items))
        for item_index, shop_item in self.item_shop.items.items():
            amount = QtWidgets.QTableWidgetItem(str(shop_item.count))
            price = QtWidgets.QTableWidgetItem(str(shop_item.price))
            item = self.gatya_items.get_item(shop_item.gatya_item_id)
            if item is None:
                continue
            item_id_o = QtWidgets.QTableWidgetItem(str(item.id))
            name_o = QtWidgets.QTableWidgetItem(item.gatya_item_name_item.name)

            name_o.setToolTip(item.gatya_item_name_item.get_trimmed_description())

            image_o = QtWidgets.QTableWidgetItem()
            image_o.setFlags(
                QtCore.Qt.ItemFlag.ItemIsEnabled  # type: ignore
                | QtCore.Qt.ItemFlag.ItemIsSelectable
            )
            img = QtGui.QImage()
            image = shop_item.cut.image
            if image is None:
                continue
            img.loadFromData(image.to_data().to_bytes())
            pixmap = QtGui.QPixmap.fromImage(img)
            image_o.setIcon(QtGui.QIcon(pixmap))

            quantity = item.gatya_item_buy_item.quantity
            effective_amount = shop_item.count * quantity
            effective_amount_o = QtWidgets.QTableWidgetItem(str(effective_amount))

            display_current_amount = QtWidgets.QTableWidgetItem()
            display_current_amount.setCheckState(
                QtCore.Qt.CheckState.Checked
                if shop_item.draw_item_value
                else QtCore.Qt.CheckState.Unchecked
            )

            item_category = QtWidgets.QTableWidgetItem(shop_item.category_name)

            self._item_shop_table.setItem(item_index, 0, item_id_o)
            self._item_shop_table.setItem(item_index, 1, name_o)
            self._item_shop_table.setItem(item_index, 2, price)
            self._item_shop_table.setItem(item_index, 3, amount)
            self._item_shop_table.setItem(item_index, 4, effective_amount_o)
            self._item_shop_table.setItem(item_index, 5, image_o)
            self._item_shop_table.setItem(item_index, 6, display_current_amount)
            self._item_shop_table.setItem(item_index, 7, item_category)

        self._item_shop_table.setIconSize(QtCore.QSize(128, 128))

        self._item_shop_table.itemChanged.connect(self.item_changed)  # type: ignore
        self._item_shop_table.doubleClicked.connect(self.item_selected)  # type: ignore

    def get_selected_item(self) -> Optional[game_data.cat_base.gatya_item.GatyaItem]:
        row = self._item_shop_table.currentRow()
        if row == -1:
            return None
        item_id = int(self._item_shop_table.item(row, 0).text())
        return self.gatya_items.get_item(item_id)

    def item_selected(self):
        selected_column = self._item_shop_table.currentColumn()
        if selected_column != 0:
            return
        gt_item = self.get_selected_item()
        if gt_item is None:
            return
        self.gatya_item_selector = gatya_item.GatyaItemSelector(
            gt_item, self.gatya_items, self.gitem_selected
        )
        self.gatya_item_selector.show()

    def item_changed(self, item: QtWidgets.QTableWidgetItem):
        row = item.row()
        column = item.column()
        if column == 0:
            return
        gitem = self.item_shop.get_item(row)
        change_effective_amount = False
        if gitem is None:
            return
        if column == 2:
            gitem.price = int(item.text())
            change_effective_amount = True
        elif column == 3:
            gitem.count = int(item.text())
            change_effective_amount = True
        elif column == 6:
            gitem.draw_item_value = item.checkState() == QtCore.Qt.CheckState.Checked
        elif column == 7:
            gitem.category_name = item.text()
        if change_effective_amount:
            gaty_item = self.gatya_items.get_item(gitem.gatya_item_id)
            if gaty_item is None:
                return

            quantity = gaty_item.gatya_item_buy_item.quantity
            effective_amount = gitem.count * quantity
            try:
                self._item_shop_table.item(row, 4).setText(str(effective_amount))
            except AttributeError:
                pass

    def gitem_selected(self, item_id: int):
        item = self.gatya_items.get_item(item_id)
        if item is None:
            return
        row = self._item_shop_table.currentRow()
        if row == -1:
            return
        self._item_shop_table.item(row, 0).setText(str(item.id))
        self._item_shop_table.item(row, 1).setText(item.gatya_item_name_item.name)
        self._item_shop_table.item(row, 1).setToolTip(
            item.gatya_item_name_item.get_trimmed_description()
        )
        quantity = item.gatya_item_buy_item.quantity
        effective_amount = int(self._item_shop_table.item(row, 3).text()) * quantity
        self._item_shop_table.item(row, 4).setText(str(effective_amount))

        item_s = self.item_shop.get_item(row)
        if item_s is None:
            return
        item_s.gatya_item_id = item.id
